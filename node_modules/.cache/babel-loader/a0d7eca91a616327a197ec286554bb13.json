{"ast":null,"code":"import { DECREASE, INCREASE, CLEAR_CART, REMOVE, GET_TOTALS, TOGGLE_AMOUNT } from \"./actions\";\nimport cartItems from \"./cart-items\";\nconst initialStore = {\n  cart: cartItems,\n  total: 0,\n  amount: 0\n};\n\nfunction reducer(state = initialStore, action) {\n  if (action.type === CLEAR_CART) {\n    return { ...state,\n      cart: []\n    };\n  }\n\n  if (action.type === DECREASE) {\n    let tempCart = state.cart.map(cartItem => {\n      if (cartItem.id === action.payload.id) {\n        cartItem = { ...cartItem,\n          amount: cartItem.amount - 1\n        };\n      }\n\n      return cartItem;\n    });\n    return { ...state,\n      cart: tempCart\n    };\n  }\n\n  if (action.type === INCREASE) {\n    let tempCart = state.cart.map(cartItem => {\n      if (cartItem.id === action.payload.id) {\n        cartItem = { ...cartItem,\n          amount: cartItem.amount + 1\n        };\n      }\n\n      return cartItem;\n    });\n    return { ...state,\n      cart: tempCart\n    };\n  }\n\n  if (action.type === REMOVE) {\n    return { ...state,\n      cart: state.cart.filter(cartItem => cartItem.id !== action.payload.id)\n    };\n  }\n\n  if (action.type === GET_TOTALS) {\n    let {\n      total,\n      amount\n    } = state.cart.reduce((cartTotal, cartItem) => {\n      const {\n        price,\n        amount\n      } = cartItem;\n      const itemTotal = price * amount;\n      cartTotal.total += itemTotal;\n      cartTotal.amount += amount;\n      return cartTotal;\n    }, {\n      total: 0,\n      amount: 0\n    });\n    total = parseFloat(total.toFixed(2));\n    return { ...state,\n      total,\n      amount\n    };\n  }\n\n  if (action.type === TOGGLE_AMOUNT) {\n    return { ...state,\n      cart: state.cart.map(cartItem => {\n        if (cartItem.id === action.payload.id) {\n          if (action.payload.toggle === \"inc\") {\n            return cartItem = { ...cartItem,\n              amount: cartItem.amount + 1\n            };\n          }\n\n          if (action.payload.toggle === \"dec\") {\n            return cartItem = { ...cartItem,\n              amount: cartItem.amount - 1\n            };\n          }\n        }\n\n        return cartItem;\n      })\n    };\n  }\n\n  return state;\n}\n\nexport default reducer; // switch (action.type) {\n//   case CLEAR_CART:\n//     return { ...state, cart: [] };\n//   default:\n//     return state;\n// }","map":{"version":3,"sources":["D:/redux-tutorial-cart-master/src/reducer.js"],"names":["DECREASE","INCREASE","CLEAR_CART","REMOVE","GET_TOTALS","TOGGLE_AMOUNT","cartItems","initialStore","cart","total","amount","reducer","state","action","type","tempCart","map","cartItem","id","payload","filter","reduce","cartTotal","price","itemTotal","parseFloat","toFixed","toggle"],"mappings":"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","sourcesContent":["import {\n  DECREASE,\n  INCREASE,\n  CLEAR_CART,\n  REMOVE,\n  GET_TOTALS,\n  TOGGLE_AMOUNT\n} from \"./actions\";\nimport cartItems from \"./cart-items\";\n\nconst initialStore = {\n  cart: cartItems,\n  total: 0,\n  amount: 0\n};\nfunction reducer(state = initialStore, action) {\n  if (action.type === CLEAR_CART) {\n    return { ...state, cart: [] };\n  }\n  if (action.type === DECREASE) {\n    let tempCart = state.cart.map(cartItem => {\n      if (cartItem.id === action.payload.id) {\n        cartItem = { ...cartItem, amount: cartItem.amount - 1 };\n      }\n      return cartItem;\n    });\n\n    return { ...state, cart: tempCart };\n  }\n  if (action.type === INCREASE) {\n    let tempCart = state.cart.map(cartItem => {\n      if (cartItem.id === action.payload.id) {\n        cartItem = { ...cartItem, amount: cartItem.amount + 1 };\n      }\n      return cartItem;\n    });\n    return { ...state, cart: tempCart };\n  }\n  if (action.type === REMOVE) {\n    return {\n      ...state,\n      cart: state.cart.filter(cartItem => cartItem.id !== action.payload.id)\n    };\n  }\n  if (action.type === GET_TOTALS) {\n    let { total, amount } = state.cart.reduce(\n      (cartTotal, cartItem) => {\n        const { price, amount } = cartItem;\n        const itemTotal = price * amount;\n\n        cartTotal.total += itemTotal;\n        cartTotal.amount += amount;\n\n        return cartTotal;\n      },\n      {\n        total: 0,\n        amount: 0\n      }\n    );\n    total = parseFloat(total.toFixed(2));\n    return { ...state, total, amount };\n  }\n  if (action.type === TOGGLE_AMOUNT) {\n    return {\n      ...state,\n      cart: state.cart.map(cartItem => {\n        if (cartItem.id === action.payload.id) {\n          if (action.payload.toggle === \"inc\") {\n            return (cartItem = { ...cartItem, amount: cartItem.amount + 1 });\n          }\n          if (action.payload.toggle === \"dec\") {\n            return (cartItem = { ...cartItem, amount: cartItem.amount - 1 });\n          }\n        }\n        return cartItem;\n      })\n    };\n  }\n  return state;\n}\n\nexport default reducer;\n\n// switch (action.type) {\n//   case CLEAR_CART:\n//     return { ...state, cart: [] };\n//   default:\n//     return state;\n// }\n"]},"metadata":{},"sourceType":"module"}